set-option -sg escape-time 0
set-option -g default-terminal "screen-256color"

set-option -g default-shell /bin/zsh
# re-number windows when one is closed
set -g renumber-windows on
set-window-option -g automatic-rename on

set -g history-limit 20000

# set -g remain-on-exit on

# enable pbcopy and pbpaste support
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/blob/master/README.md
#  brew install reattach-to-user-namespace
set-option -g default-command "reattach-to-user-namespace -l zsh"

set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'


# Use vim keybindings in copy mode
set-window-option -g mode-keys vi;
bind-key -T copy-mode-vi v send -X begin-selection;
bind-key -T copy-mode-vi V send -X select-line;
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel pbcopy

# Update default binding of `Enter` and `Space to also use copy-pipe
unbind -T copy-mode-vi Enter
unbind -T copy-mode-vi Space

bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down

# copy text with mouse selection without pressing any key
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel\; run "tmux save -|pbcopy >/dev/null 2>&1"

# focus events enabled for terminals that support them
set -g focus-events on

# # Mouse mode on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# bind-key o capture-pane -S - -e \; save-buffer /tmp/tmux-buffer \; new-window -a "less +G -fr /tmp/tmux-buffer\n"


# Set title
set -g set-titles on
set -g set-titles-string "#T"


# Switch panes 
# Usage: "ALT+arrow keys" (without prefix key)
# from https://gist.github.com/spicycode
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D


#open window with currrent path                                                                   
bind c new-window -c '#{pane_current_path}'                                                     
#open panel with current path                                                                   
bind '%' split-window -h -c '#{pane_current_path}'                                        
bind '"' split-window -v -c '#{pane_current_path}'


:set -g visual-activity on
:setw -g monitor-activity on
